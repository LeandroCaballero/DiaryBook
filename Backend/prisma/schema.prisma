generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  createdAt           DateTime       @default(now()) @db.Timestamp(6)
  updatedAt           DateTime       @updatedAt
  name                String
  email               String         @unique
  password            String
  confirmEmail        Boolean        @default(false)
  tokenEmail          String
  codeRecoverPassword String?
  profileImage        String?
  Purchases           Purchase[]
  Groups              Group[]        @relation("Users")
  Admins              Group[]        @relation("Admins")
  Requests            Group[]        @relation("RequestsUsers")
  PurchaseItems       PurchaseItem[]
  purchaseItemId      Int?
}

model Group {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt
  name         String
  Admins       User[]     @relation("Admins")
  Users        User[]     @relation("Users")
  RequestUsers User[]     @relation("RequestsUsers")
  Purchases    Purchase[]
  Summaries    Summary[]
}

model Purchase {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt
  dateBuy       DateTime?
  name          String?
  PurchaseItems PurchaseItem[]
  Buyer         User           @relation(fields: [buyerId], references: [id])
  buyerId       String
  Group         Group          @relation(fields: [groupId], references: [id])
  groupId       String
}

model PurchaseItem {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  quantity    Int
  // Price here for inflation
  productName String
  price       Float
  forUsers    User[]
  total       Float
  // Product    Product   @relation(fields: [productId], references: [id])
  // productId   Int
  Purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId  String?
}

model Summary {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @updatedAt
  dateStart    DateTime
  dateEnd      DateTime
  Group        Group         @relation(fields: [groupId], references: [id])
  groupId      String
  Transactions Transaction[]
}

model Transaction {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  updatedAt DateTime          @updatedAt
  status    TransactionStatus @default(Pending)
  Summary   Summary?          @relation(fields: [summaryId], references: [id])
  summaryId String?
  buyerId   String
  debtorId  String
  amount    Float
  // Participants User[]
}

enum TransactionStatus {
  Pending
  Paid
}

// model Product {
//   id           Int            @id @default(autoincrement())
//   createdAt    DateTime       @default(now()) @db.Timestamp(6)
//   updatedAt    DateTime       @updatedAt
//   name         String
//   description  String?
//   PurchaseItem PurchaseItem[]
// }
